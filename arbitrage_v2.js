import { TOKENS, getTokenName } from "./utils/tokens.js";
import { getQuote } from "./core/quote.js";
import { checkLiquidity } from "./core/liquidity.js";
import { calcProfit } from "./core/profit.js";
import { getTokenBalance } from "./core/balance.js";
import { wallet, publicKey } from "./core/wallet.js";
import { ENABLE_REAL_TRADE, MIN_PROFIT_PERCENT, MAIN_TOKEN_DECIMALS, SLIPPAGE_BPS } from "./utils/config.js";
import { executeBatchSwap } from "./core/trade.js";
import { logArbitrage } from "./core/log.js";
import { updateSuccessRate, shouldStop } from "./core/risk.js";
import { autoGatherToMainToken } from "./core/auto_gather.js";
import { getCurrentRpc, switchRpc, getConnection } from "./utils/rpc.js";

const ARBITRAGE_PAIRS = [
    [TOKENS.USDC, TOKENS.SOL, TOKENS.USDT],
    [TOKENS.USDC, TOKENS.BONK, TOKENS.JUP],
    [TOKENS.USDC, TOKENS.JUP, TOKENS.SOL]
];
const MAIN_TOKEN = TOKENS.USDC;
const AMOUNT = 1_000_000; // 1 USDC
const MAX_PRICE_IMPACT = 0.01; // 1%

async function main() {
    console.log("üöÄ ÂêØÂä®‰∏âËßíÂ•óÂà©‰∏ªÊµÅÁ®ã...");
    console.log("Èí±ÂåÖÂú∞ÂùÄ:", publicKey.toBase58());

    while (true) {
        try {
            // 1. Ê£ÄÊü•‰∏ªÂ∏Å‰ΩôÈ¢ù
            const balance = await getTokenBalance(getCurrentRpc(), publicKey.toBase58(), MAIN_TOKEN);
            console.log(`‰∏ªÂ∏Å(${getTokenName(MAIN_TOKEN)})‰ΩôÈ¢ù:`, balance);
            if (balance < AMOUNT / Math.pow(10, MAIN_TOKEN_DECIMALS)) {
                console.log("‚ùå ‰∏ªÂ∏Å‰ΩôÈ¢ù‰∏çË∂≥ÔºåËá™Âä®ÂΩíÈõÜ...");
                await autoGatherToMainToken(wallet, MAIN_TOKEN, ARBITRAGE_PAIRS, 0.1);
                continue;
            }

            // 2. È£éÊéßÊ£ÄÊü•
            // ËøôÈáåÂèØÊ†πÊçÆÂÆûÈôÖÈ£éÊéßÂèÇÊï∞Ë∞ÉÁî®shouldStop

            // 3. ÈÅçÂéÜÂ•óÂà©Ë∑ØÂæÑ
            for (const [tokenA, tokenB, tokenC] of ARBITRAGE_PAIRS) {
                console.log(`\n„ÄêÊ®°Êãü‰∏âËßíÂ•óÂà©„Äë${getTokenName(tokenA)} ‚Üí ${getTokenName(tokenB)} ‚Üí ${getTokenName(tokenC)} ‚Üí ${getTokenName(tokenA)}`);
                // ËÆ∞ÂΩïÊä•‰ª∑ÂºÄÂßãÊó∂Èó¥Âíåslot
                const startTime = Date.now();
                const startSlot = await getConnection().getSlot();

                // 3.1 Ê£ÄÊü•ÊØè‰∏ÄÊ≠•ÊµÅÂä®ÊÄß
                const l1 = await checkLiquidity(tokenA, tokenB, AMOUNT, MAX_PRICE_IMPACT);
                if (!l1.passed) { console.log("‚ùå Á¨¨‰∏ÄÊ≠•ÊµÅÂä®ÊÄß‰∏çË∂≥:", l1.reason); continue; }
                const l2 = await checkLiquidity(tokenB, tokenC, l1.quote.outAmount, MAX_PRICE_IMPACT);
                if (!l2.passed) { console.log("‚ùå Á¨¨‰∫åÊ≠•ÊµÅÂä®ÊÄß‰∏çË∂≥:", l2.reason); continue; }
                const l3 = await checkLiquidity(tokenC, tokenA, l2.quote.outAmount, MAX_PRICE_IMPACT);
                if (!l3.passed) { console.log("‚ùå Á¨¨‰∏âÊ≠•ÊµÅÂä®ÊÄß‰∏çË∂≥:", l3.reason); continue; }
                // 3.2 ËÆ°ÁÆóÂà©Ê∂¶
                const { profit, profitPercent } = calcProfit(AMOUNT, l3.quote.outAmount);
                console.log(`È¢ÑÊúüÂà©Ê∂¶: ${profit / 1e6} (${profitPercent.toFixed(4)}%)`);
                // 3.3 Êª°Ë∂≥Êù°‰ª∂ÂàôÊâßË°åÂ•óÂà©
                if (profitPercent > MIN_PROFIT_PERCENT) {
                    if (ENABLE_REAL_TRADE) {

                        // ÁúüÂÆû‰∫§Êòì
                        try {
                            console.log("l1.quote:", l1.quote);
                            console.log("l2.quote:", l2.quote);
                            console.log("l3.quote:", l3.quote);
                            if (!l1.quote.swapTransaction || !l2.quote.swapTransaction || !l3.quote.swapTransaction) {
                                console.log("‚ùå swapTransaction Â≠óÊÆµÁº∫Â§±ÔºåÊó†Ê≥ïÊâßË°åÁúüÂÆûÂ•óÂà©");
                                continue;
                            }
                            const sig = await executeBatchSwap([
                                Buffer.from(l1.quote.swapTransaction, 'base64'),
                                Buffer.from(l2.quote.swapTransaction, 'base64'),
                                Buffer.from(l3.quote.swapTransaction, 'base64')
                            ], startTime, startSlot);
                            console.log("‚úÖ ÁúüÂÆûÂ•óÂà©ÊàêÂäüÔºå‰∫§ÊòìÂìàÂ∏å:", sig);
                            logArbitrage({ time: new Date().toISOString(), path: [tokenA, tokenB, tokenC], profit, profitPercent, sig });
                            updateSuccessRate(true, profit / 1e6);
                        } catch (e) {
                            console.log("‚ùå ÁúüÂÆûÂ•óÂà©Â§±Ë¥•:", e.message);
                            updateSuccessRate(false, 0);
                        }
                    } else {
                        // Âè™Ê®°Êãü
                        console.log("‚úÖ Êª°Ë∂≥Âà©Ê∂¶ÈòàÂÄºÔºå‰ªÖÊ®°Êãü");
                        logArbitrage({ time: new Date().toISOString(), path: [tokenA, tokenB, tokenC], profit, profitPercent, simulated: true });
                        updateSuccessRate(true, profit / 1e6);
                    }
                } else {
                    console.log("Êú™ËææÂà©Ê∂¶ÈòàÂÄºÔºå‰ªÖÊ®°Êãü");
                    updateSuccessRate(false, 0);
                }
            }
        } catch (e) {
            console.error("‰∏ªÂæ™ÁéØÂºÇÂ∏∏:", e.message);
            if (e.message.includes("429") || e.message.includes("ECONNREFUSED") || e.message.includes("ENOTFOUND")) {
                switchRpc();
            }
        }
        // ‰ºëÁú†‰∏ÄÊÆµÊó∂Èó¥
        await new Promise(r => setTimeout(r, 10000));
    }
}

main().catch(console.error);